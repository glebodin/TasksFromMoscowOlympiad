<?xml version="1.0" encoding="utf-8" standalone="no"?>
<problem revision="23" short-name="moscowolympiad5g" url="https://polygon.codeforces.com/p7h5SP3/glebodin/moscowolympiad5g">
        
    <names>
                
        <name language="russian" value="Склады в Байтландии"/>
            
    </names>
        
    <statements>
                
        <statement charset="UTF-8" language="russian" mathjax="true" path="statements/russian/problem.tex" type="application/x-tex"/>
                
        <statement charset="UTF-8" language="russian" mathjax="true" path="statements/.html/russian/problem.html" type="text/html"/>
                
        <statement language="russian" path="statements/.pdf/russian/problem.pdf" type="application/pdf"/>
            
    </statements>
        
    <judging cpu-name="Intel(R) Core(TM) i3-8100 CPU @ 3.60GHz" cpu-speed="3600" input-file="" output-file="">
                
        <testset name="tests">
                        
            <time-limit>10000</time-limit>
                        
            <memory-limit>536870912</memory-limit>
                        
            <test-count>11</test-count>
                        
            <input-path-pattern>tests/%02d</input-path-pattern>
                        
            <answer-path-pattern>tests/%02d.a</answer-path-pattern>
                        
            <tests>
                                
                <test description="Корректным ответом в первом тесте также является любое множество из двух вершин. Во втором же наилучший ответ любое число из пары (1,2) и любое из (3,4)" method="manual" sample="true"/>
                                
                <test method="manual"/>
                                
                <test description="File &quot;bigtest.txt&quot;" method="manual"/>
                                
                <test cmd="gen_rand 4000 20037 142" method="generated"/>
                                
                <test cmd="gen_rand 2000 100000 20" method="generated"/>
                                
                <test cmd="gen_rand 2000 100000 28" method="generated"/>
                                
                <test cmd="gen_rand 1000 100000 200" method="generated"/>
                                
                <test cmd="gen_rand 4000 100000 40" method="generated"/>
                                
                <test cmd="gen_rand 1000 10000 42" method="generated"/>
                                
                <test cmd="gen_rand 100 1500 22" method="generated"/>
                                
                <test cmd="gen_rand 50 300 10" method="generated"/>
                            
            </tests>
                    
        </testset>
            
    </judging>
        
    <files>
                
        <resources>
                        
            <file path="files/olymp.sty"/>
                        
            <file path="files/problem.tex"/>
                        
            <file path="files/statements.ftl"/>
                        
            <file path="files/testlib.h" type="h.g++"/>
                    
        </resources>
                
        <executables>
                        
            <executable>
                                
                <source path="files/checker.cpp" type="cpp.g++17"/>
                                
                <binary path="files/checker.exe" type="exe.win32"/>
                            
            </executable>
                        
            <executable>
                                
                <source path="files/gen_rand.cpp" type="cpp.g++17"/>
                                
                <binary path="files/gen_rand.exe" type="exe.win32"/>
                            
            </executable>
                        
            <executable>
                                
                <source path="files/generator.cpp" type="cpp.g++17"/>
                                
                <binary path="files/generator.exe" type="exe.win32"/>
                            
            </executable>
                        
            <executable>
                                
                <source path="files/prechecker.cpp" type="cpp.g++17"/>
                                
                <binary path="files/prechecker.exe" type="exe.win32"/>
                            
            </executable>
                    
        </executables>
            
    </files>
        
    <assets>
                
        <checker type="testlib">
                        
            <source path="files/checker.cpp" type="cpp.g++17"/>
                        
            <binary path="check.exe" type="exe.win32"/>
                        
            <copy path="check.cpp" type="cpp.g++17"/>
                        
            <testset>
                                
                <test-count>12</test-count>
                                
                <input-path-pattern>files/tests/checker-tests/%02d</input-path-pattern>
                                
                <output-path-pattern>files/tests/checker-tests/%02d.o</output-path-pattern>
                                
                <answer-path-pattern>files/tests/checker-tests/%02d.a</answer-path-pattern>
                                
                <tests>
                                        
                    <test verdict="ok"/>
                                        
                    <test verdict="ok"/>
                                        
                    <test verdict="presentation-error"/>
                                        
                    <test verdict="presentation-error"/>
                                        
                    <test verdict="ok"/>
                                        
                    <test verdict="ok"/>
                                        
                    <test verdict="ok"/>
                                        
                    <test verdict="ok"/>
                                        
                    <test verdict="ok"/>
                                        
                    <test verdict="ok"/>
                                        
                    <test verdict="ok"/>
                                        
                    <test verdict="ok"/>
                                    
                </tests>
                            
            </testset>
                    
        </checker>
                
        <solutions>
                        
            <solution tag="time-limit-exceeded-or-accepted">
                                
                <source path="solutions/dpsol.cpp" type="cpp.g++17"/>
                                
                <binary path="solutions/dpsol.exe" type="exe.win32"/>
                            
            </solution>
                        
            <solution tag="accepted">
                                
                <source path="solutions/glebodin_greedy.cpp" type="cpp.g++17"/>
                                
                <binary path="solutions/glebodin_greedy.exe" type="exe.win32"/>
                            
            </solution>
                        
            <solution tag="main">
                                
                <source path="solutions/glebodin_otzhig.cpp" type="cpp.g++17"/>
                                
                <binary path="solutions/glebodin_otzhig.exe" type="exe.win32"/>
                            
            </solution>
                        
            <solution tag="time-limit-exceeded-or-accepted">
                                
                <source path="solutions/glebodin_part.cpp" type="cpp.g++14"/>
                                
                <binary path="solutions/glebodin_part.exe" type="exe.win32"/>
                            
            </solution>
                        
            <solution tag="accepted">
                                
                <source path="solutions/sol-stupid.py" type="python.3"/>
                                
                <binary path="solutions/sol-stupid.pys3" type="pythonx.3"/>
                            
            </solution>
                    
        </solutions>
            
    </assets>
        
    <properties>
                
        <property name="tests-wellformed" value="true"/>
            
    </properties>
        
    <stresses>
                
        <stress-count>0</stress-count>
                
        <stress-path-pattern>stresses/%03d</stress-path-pattern>
                
        <list/>
            
    </stresses>
    
</problem>
